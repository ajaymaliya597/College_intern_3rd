// 1. Group users by role and calculate the average salary for each role:
db.users.aggregate([
    { $group: { _id: "$role", averageSalary: { $avg: "$salary" } } }
])

// 2. Group users by city and find the total number of users in each city:
db.users.aggregate([
    { $group: { _id: "$city", totalUsers: { $sum: 1 } } }
])

// 3. Group users by gender and determine the average age for each gender:
db.users.aggregate([
    { $group: { _id: "$gender", averageAge: { $avg: "$age" } } }
])

// 4. Group users by role and city, and calculate the total salary for each subgroup:
db.users.aggregate([
    { $group: { _id: { role: "$role", city: "$city" }, totalSalary: { $sum: "$salary" } } }
])

// 5. Group users by gender and city, and find the maximum salary in each subgroup:
db.users.aggregate([
    { $group: { _id: { gender: "$gender", city: "$city" }, maxSalary: { $max: "$salary" } } }
])

// 6. Group users by skills and count how many users have each skill:
db.users.aggregate([
    { $unwind: "$skills" },
    { $group: { _id: "$skills", count: { $sum: 1 } } }
])

// 7. Group users by role and find the minimum age for each role:
db.users.aggregate([
    { $group: { _id: "$role", minAge: { $min: "$age" } } }
])

// 8. Group users by city and gender, and calculate the average salary for each subgroup:
db.users.aggregate([
    { $group: { _id: { city: "$city", gender: "$gender" }, averageSalary: { $avg: "$salary" } } }
])

// 9. Group users by role and determine the total number of unique cities for each role:
db.users.aggregate([
    { $group: { _id: "$role", uniqueCities: { $addToSet: "$city" } } },
    { $project: { role: "$_id", uniqueCitiesCount: { $size: "$uniqueCities" } } }
])

// 10. Group users by age and count the number of users in each age group:
db.users.aggregate([
    { $group: { _id: "$age", count: { $sum: 1 } } }
])

// 11. Group users by city and calculate the average number of skills per user in each city:
db.users.aggregate([
    { $group: { _id: "$city", averageSkills: { $avg: { $size: "$skills" } } } }
])

// 12. Group users by role and find the highest salary in each role:
db.users.aggregate([
    { $group: { _id: "$role", maxSalary: { $max: "$salary" } } }
])

// 13. Group users by gender and calculate the total number of users for each gender:
db.users.aggregate([
    { $group: { _id: "$gender", totalUsers: { $sum: 1 } } }
])

// 14. Group users by city and determine the average age for users in each city:
db.users.aggregate([
    { $group: { _id: "$city", averageAge: { $avg: "$age" } } }
])

// 15. Group users by role and gender, and calculate the average salary for each subgroup:
db.users.aggregate([
    { $group: { _id: { role: "$role", gender: "$gender" }, averageSalary: { $avg: "$salary" } } }
])

// 16. Group users by skills and determine the total number of users for each skill:
db.users.aggregate([
    { $unwind: "$skills" },
    { $group: { _id: "$skills", count: { $sum: 1 } } }
])

// 17. Group users by age and find the maximum salary for each age group:
db.users.aggregate([
    { $group: { _id: "$age", maxSalary: { $max: "$salary" } } }
])

// 18. Group users by role and calculate the total number of users with more than three skills:
db.users.aggregate([
    { $match: { $expr: { $gt: [ { $size: "$skills" }, 3 ] } } },
    { $group: { _id: "$role", count: { $sum: 1 } } }
])

// 19. Group users by gender and city, and find the average number of skills per user in each subgroup:
db.users.aggregate([
    { $group: { _id: { gender: "$gender", city: "$city" }, averageSkills: { $avg: { $size: "$skills" } } } }
])

// 20. Group users by role and determine the highest and lowest salaries for each role:
db.users.aggregate([
    { $group: { _id: "$role", highestSalary: { $max: "$salary" }, lowestSalary: { $min: "$salary" } } }
])


// 1. Group users by city and find the average number of users per role in each city
db.users.aggregate([
  {
    $group: {
      _id: { city: "$city", role: "$role" },
      count: { $sum: 1 }
    }
  },
  {
    $group: {
      _id: "$_id.city",
      roles: { $push: { role: "$_id.role", averageUsers: { $avg: "$count" } } }
    }
  }
])

// 2. Group users by role and gender, and calculate the total salary for each subgroup
db.users.aggregate([
  {
    $group: {
      _id: { role: "$role", gender: "$gender" },
      totalSalary: { $sum: "$salary" }
    }
  }
])

// 3. Group users by age and determine the total number of users with a salary above 1,000,000
db.users.aggregate([
  {
    $match: { salary: { $gt: 1000000 } }
  },
  {
    $group: {
      _id: "$age",
      count: { $sum: 1 }
    }
  }
])

// 4. Group users by skills and find the average salary for users with each skill
db.users.aggregate([
  {
    $unwind: "$skills"
  },
  {
    $group: {
      _id: "$skills",
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 5. Group users by role and city, and find the average age for each subgroup
db.users.aggregate([
  {
    $group: {
      _id: { role: "$role", city: "$city" },
      avgAge: { $avg: "$age" }
    }
  }
])

// 6. Group users by gender and calculate the total number of users with Java as a skill
db.users.aggregate([
  {
    $match: { skills: "Java" }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

// 7. Group users by city and determine the maximum number of skills any user in each city possesses
db.users.aggregate([
  {
    $project: {
      city: 1,
      numSkills: { $size: "$skills" }
    }
  },
  {
    $group: {
      _id: "$city",
      maxSkills: { $max: "$numSkills" }
    }
  }
])

// 8. Group users by role and calculate the total number of users for each role with Python as a skill
db.users.aggregate([
  {
    $match: { skills: "Python" }
  },
  {
    $group: {
      _id: "$role",
      count: { $sum: 1 }
    }
  }
])

// 9. Group users by gender and city, and find the average salary for users in each subgroup with more than two skills
db.users.aggregate([
  {
    $match: { skills: { $size: { $gt: 2 } } }
  },
  {
    $group: {
      _id: { gender: "$gender", city: "$city" },
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 10. Group users by age and determine the average number of skills per user in each age group
db.users.aggregate([
  {
    $unwind: "$skills"
  },
  {
    $group: {
      _id: "$age",
      avgSkills: { $avg: { $size: "$skills" } }
    }
  }
])

// 11. Group users by role and find the total salary of users who have "customer" as their role and live in Mumbai
db.users.aggregate([
  {
    $match: { role: "customer", city: "Mumbai" }
  },
  {
    $group: {
      _id: "$role",
      totalSalary: { $sum: "$salary" }
    }
  }
])

// 12. Group users by city and find the maximum salary in each city for users with "admin" role
db.users.aggregate([
  {
    $match: { role: "admin" }
  },
  {
    $group: {
      _id: "$city",
      maxSalary: { $max: "$salary" }
    }
  }
])

// 13. Group users by gender and calculate the total number of users with salary above 500,000
db.users.aggregate([
  {
    $match: { salary: { $gt: 500000 } }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

// 14. Group users by skills and determine the average age for users with each skill
db.users.aggregate([
  {
    $unwind: "$skills"
  },
  {
    $group: {
      _id: "$skills",
      avgAge: { $avg: "$age" }
    }
  }
])

// 15. Group users by role and find the average number of skills for users with salary below 700,000
db.users.aggregate([
  {
    $match: { salary: { $lt: 700000 } }
  },
  {
    $unwind: "$skills"
  },
  {
    $group: {
      _id: "$role",
      avgSkills: { $avg: { $size: "$skills" } }
    }
  }
])

// 16. Group users by city and gender, and calculate the average salary for each subgroup with "Python" skill
db.users.aggregate([
  {
    $match: { skills: "Python" }
  },
  {
    $group: {
      _id: { city: "$city", gender: "$gender" },
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 17. Group users by age and determine the total number of users with the role "admin" in each age group
db.users.aggregate([
  {
    $match: { role: "admin" }
  },
  {
    $group: {
      _id: "$age",
      count: { $sum: 1 }
    }
  }
])

// 18. Group users by role and city, and find the total number of users with "C++" as a skill in each subgroup
db.users.aggregate([
  {
    $match: { skills: "C++" }
  },
  {
    $group: {
      _id: { role: "$role", city: "$city" },
      count: { $sum: 1 }
    }
  }
])

// 19. Group users by gender and calculate the total number of users with salary above the average salary of all users
db.users.aggregate([
  {
    $group: {
      _id: null,
      avgSalary: { $avg: "$salary" }
    }
  },
  {
    $match: { salary: { $gt: "$avgSalary" } }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

// 20. Group users by skills and determine the maximum age of users with each skill
db.users.aggregate([
  {
    $unwind: "$skills"
  },
  {
    $group: {
      _id: "$skills",
      maxAge: { $max: "$age" }
    }
  }
])

// 21. Group users by role and city, and calculate the total number of users with more than one skill
db.users.aggregate([
  {
    $match: { $expr: { $gt: [{ $size: "$skills" }, 1] } }
  },
  {
    $group: {
      _id: { role: "$role", city: "$city" },
      count: { $sum: 1 }
    }
  }
])

// 22. Group users by gender and city, and determine the total number of users with a salary less than 500,000 in each subgroup
db.users.aggregate([
  {
    $match: { salary: { $lt: 500000 } }
  },
  {
    $group: {
      _id: { gender: "$gender", city: "$city" },
      count: { $sum: 1 }
    }
  }
])

// 23. Group users by age and find the average salary of users who have "customer" role in each age group
db.users.aggregate([
  {
    $match: { role: "customer" }
  },
  {
    $group: {
      _id: "$age",
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 24. Group users by role and determine the average salary for users with "Kotlin" as a skill
db.users.aggregate([
  {
    $match: { skills: "Kotlin" }
  },
  {
    $group: {
      _id: "$role",
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 25. Group users by city and calculate the total number of users with "admin" role in each city
db.users.aggregate([
  {
    $match: { role: "admin" }
  },
  {
    $group: {
      _id: "$city",
      count: { $sum: 1 }
    }
  }
])

// 26. Group users by gender and determine the total number of users with "Java" and "Python" both as skills
db.users.aggregate([
  {
    $match: { skills: { $all: ["Java", "Python"] } }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

// 27. Group users by age and find the total number of users with the role "customer" in each age group
db.users.aggregate([
  {
    $match: { role: "customer" }
  },
  {
    $group: {
      _id: "$age",
      count: { $sum: 1 }
    }
  }
])

// 28. Group users by role and city, and calculate the total number of users with "DBMS" as a skill in each subgroup
db.users.aggregate([
  {
    $match: { skills: "DBMS" }
  },
  {
    $group: {
      _id: { role: "$role", city: "$city" },
      count: { $sum: 1 }
    }
  }
])

// 29. Group users by gender and determine the total number of users with more than three skills in each gender
db.users.aggregate([
  {
    $match: { $expr: { $gt: [{ $size: "$skills" }, 3] } }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

// 30. Group users by city and find the average number of skills for users in each city with salary above 1,000,000
db.users.aggregate([
  {
    $match: { salary: { $gt: 1000000 } }
  },
  {
    $group: {
      _id: "$city",
      avgSkills: { $avg: { $size: "$skills" } }
    }
  }
])

// 31. Group users by age and determine the maximum salary for users with "admin" role in each age group
db.users.aggregate([
  {
    $match: { role: "admin" }
  },
  {
    $group: {
      _id: "$age",
      maxSalary: { $max: "$salary" }
    }
  }
])

// 32. Group users by role and city, and find the total salary of users with "JavaScript" as a skill in each subgroup
db.users.aggregate([
  {
    $match: { skills: "JavaScript" }
  },
  {
    $group: {
      _id: { role: "$role", city: "$city" },
      totalSalary: { $sum: "$salary" }
    }
  }
])

// 33. Group users by gender and determine the average salary for users with the role "customer" in each gender
db.users.aggregate([
  {
    $match: { role: "customer" }
  },
  {
    $group: {
      _id: "$gender",
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 34. Group users by city and calculate the total number of users with "React" as a skill in each city
db.users.aggregate([
  {
    $match: { skills: "React" }
  },
  {
    $group: {
      _id: "$city",
      count: { $sum: 1 }
    }
  }
])

// 35. Group users by age and determine the average salary for users with "SQL" as a skill in each age group
db.users.aggregate([
  {
    $match: { skills: "SQL" }
  },
  {
    $group: {
      _id: "$age",
      avgSalary: { $avg: "$salary" }
    }
  }
])

// 36. Group users by role and find the total number of users with "Django" as a skill in each role
db.users.aggregate([
  {
    $match: { skills: "Django" }
  },
  {
    $group: {
      _id: "$role",
      count: { $sum: 1 }
    }
  }
])

// 37. Group users by gender and determine the maximum number of skills any user in each gender possesses
db.users.aggregate([
  {
    $project: {
      gender: 1,
      numSkills: { $size: "$skills" }
    }
  },
  {
    $group: {
      _id: "$gender",
      maxSkills: { $max: "$numSkills" }
    }
  }
])

// 38. Group users by city and calculate the total number of users with "Node.js" as a skill in each city
db.users.aggregate([
  {
    $match: { skills: "Node.js" }
  },
  {
    $group: {
      _id: "$city",
      count: { $sum: 1 }
    }
  }
])

// 39. Group users by age and find the total number of users with "HTML" and "CSS" both as skills in each age group
db.users.aggregate([
  {
    $match: { skills: { $all: ["HTML", "CSS"] } }
  },
  {
    $group: {
      _id: "$age",
      count: { $sum: 1 }
    }
  }
])

// 40. Group users by role and gender, and determine the average number of skills for each subgroup with salary above 1,000,000
db.users.aggregate([
  {
    $match: { salary: { $gt: 1000000 } }
  },
  {
    $group: {
      _id: { role: "$role", gender: "$gender" },
      avgSkills: { $avg: { $size: "$skills" } }
    }
  }
])
